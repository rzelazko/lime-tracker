@charset "UTF-8";

// Non-overlapping Material Design breakpoints
// @type map
$breakpoints: (
  xs: (
    begin: 0,
    end: 599.9px,
  ),
  sm: (
    begin: 600px,
    end: 959.9px,
  ),
  md: (
    begin: 960px,
    end: 1279.9px,
  ),
  lg: (
    begin: 1280px,
    end: 1919.9px,
  ),
  xl: (
    begin: 1920px,
    end: 4999.99px,
  ),
) !default;

// Overlapping breakpoints that are greater than defined
// Material Design breakpoints
// @type map
$overlapping-gt: (
  gt-xs: 600px,
  gt-sm: 960px,
  gt-md: 1280px,
  gt-lg: 1920px,
) !default;

// Overlapping breakpoints that are less than defined
// Material Design breakpoints
// @type map
$overlapping-lt: (
  lt-sm: 599.9px,
  lt-md: 959.9px,
  lt-lg: 1279.9px,
  lt-xl: 1919.9px,
) !default;

// Media Query Mixin, takes a breakpoint and returns a wrapping
// media query statement
// e.g.
//
// @include layout-bp(xs) {
//   background-color: red;
// }
//
// becomes
//
// @media (min-width: 0px) and (max-width: 599px) {
//   background-color: red;
// }
@mixin layout-bp($bp) {
  @if map-has-key($breakpoints, $bp) {
    $min: map-get(map-get($breakpoints, $bp), begin);
    $max: map-get(map-get($breakpoints, $bp), end);
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if map-has-key($overlapping-gt, $bp) {
    $min: map-get($overlapping-gt, $bp);
    @media (min-width: $min) {
      @content;
    }
  } @else if map-has-key($overlapping-lt, $bp) {
    $max: map-get($overlapping-lt, $bp);
    @media (max-width: $max) {
      @content;
    }
  }
}

// Helper classes
::ng-deep {
  .flex-1,
  .flex-grow,
  .flex-row,
  .flex-col,
  mat-card-content.flex-row,
  mat-card-content.flex-col {
    display: flex;
  }

  .flex-1 {
    // Same as flex: 1 1 0 (grow, shrink, basis 0). Has similar effect to width: 100%;
    flex: 1;
  }

  .flex-grow {
    // Same as flex: 1 1 auto (grow, shrink, basis auto). For spacer, etc.
    flex-grow: 1;
  }

  .flex-row {
    flex-direction: row;
  }

  .flex-col {
    flex-direction: column;
  }

  .flex-fill {
    margin: 0;
    width: 100%;
    height: 100%;
    min-width: 100%;
    min-height: 100%;
  }

  .flex-wrap {
    flex-wrap: wrap;
  }

  // Justify content.
  .space-between {
    justify-content: space-between;
  }

  .justify-start {
    justify-content: flex-start;
  }

  .justify-center {
    justify-content: center;
  }

  .justify-end {
    justify-content: flex-end;
  }

  // Align items
  .items-start {
    align-items: flex-start;
    align-content: flex-start;
  }

  .items-center {
    align-items: center;
    align-content: center;
  }

  .items-stretch-col {
    max-width: 100%;
  }

  .items-stretch-row {
    max-height: 100%;
  }

  .items-end {
    align-items: flex-end;
    align-content: flex-end;
  }

  // Gaps
  .gap-small {
    gap: 0.5em;
  }
  .gap-normal {
    gap: 1em;
  }

  // Conditional
  .hide-gt-sm {
    @include layout-bp(gt-sm) {
      display: none;
    }
  }
  .show-gt-sm {
    @include layout-bp(lt-md) {
      display: none;
    }
  }
  .show-gt-xs {
    @include layout-bp(lt-sm) {
      display: none;
    }
  }
}
